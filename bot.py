import asyncio
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, ADMIN_ID, CHARACTERS, ROLEPLAY_SETTINGS, ROLEPLAY_MODES, USER_CHARACTER_MAPPING, MODERATORS, ACHIEVEMENTS
from roleplay_manager import roleplay_manager
from database_manager import db_manager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def is_moderator(user_id):
    return user_id == ADMIN_ID or db_manager.is_moderator(user_id)

def is_admin(user_id):
    return user_id == ADMIN_ID

def get_character_for_user(user_id, username, first_name):
    if username:
        username_with_at = f"@{username}"
        if username_with_at in USER_CHARACTER_MAPPING:
            return USER_CHARACTER_MAPPING[username_with_at]
        if username in USER_CHARACTER_MAPPING:
            return USER_CHARACTER_MAPPING[username]
    
    if first_name and first_name in USER_CHARACTER_MAPPING:
        return USER_CHARACTER_MAPPING[first_name]
    
    return None

def can_user_join_with_character(session, user_id, character_name):
    if user_id in session["players"]:
        return False, "–í—ã —É–∂–µ –≤ —Ä–æ–ª–µ–≤–æ–π!"
    
    for player_id, player_data in session["players"].items():
        if player_data["character"] == character_name and player_id != user_id:
            return False, "–≠—Ç–∞ —Ä–æ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞!"
    
    return True, "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"

def create_join_keyboard(session):
    keyboard_buttons = []
    
    for character_name, character_data in CHARACTERS.items():
        role_taken = False
        for player_data in session["players"].values():
            if player_data["character"] == character_name:
                role_taken = True
                break
        
        if not role_taken:
            button_text = f"üé≠ {character_name} - {character_data['role']}"
            keyboard_buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=f"join_{character_name}")
            ])
        else:
            button_text = f"‚ùå {character_name} - –ó–∞–Ω—è—Ç–∞"
            keyboard_buttons.append([
                InlineKeyboardButton(text=button_text, callback_data="role_taken")
            ])
    
    if not keyboard_buttons:
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –í—Å–µ —Ä–æ–ª–∏ –∑–∞–Ω—è—Ç—ã", callback_data="all_roles_taken")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="help", description="üìñ –ü–æ–º–æ—â—å"),
        types.BotCommand(command="role", description="üé≠ –ú–æ—è —Ä–æ–ª—å"),
        types.BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="achievements", description="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
        types.BotCommand(command="top", description="üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
        types.BotCommand(command="roles", description="üë• –í—Å–µ —Ä–æ–ª–∏"),
        types.BotCommand(command="start_rp", description="üé¨ –ù–∞—á–∞—Ç—å —Ä–æ–ª–µ–≤—É—é"),
        types.BotCommand(command="force_start", description="‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç"),
        types.BotCommand(command="stop_rp", description="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–ª–µ–≤—É—é"),
        types.BotCommand(command="moderators", description="üìã –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"),
        types.BotCommand(command="chats", description="üí¨ –ß–∞—Ç—ã"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é")

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —á–∞—Ç–∞—Ö! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return
    
    user_status = ""
    if message.from_user.id == ADMIN_ID:
        user_status = "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif is_moderator(message.from_user.id):
        user_status = "üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        user_status = "üë§ –ò–≥—Ä–æ–∫"
    
    help_text = (
        f"üé≠ **–†–æ–ª–µ–≤–æ–π –±–æ—Ç –ü–∏–∫–æ –ü–∏–∫–æ–≤–∏—á–∞ - –°–ø—Ä–∞–≤–∫–∞**\n\n"
        f"üîë **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {user_status}\n\n"
    )
    
    if message.from_user.id == ADMIN_ID:
        help_text += (
            "**üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
            "‚Ä¢ /moderators - üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ /add_moderator @—é–∑–µ—Ä–Ω–µ–π–º - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /add_moderator_id ID - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID\n"
            "‚Ä¢ /remove_moderator @—é–∑–µ—Ä–Ω–µ–π–º - ‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ /chats - üí¨ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤\n"
            "‚Ä¢ /–≤—ã–π—Ç–∏ ID - üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n\n"
        )
    
    if is_moderator(message.from_user.id):
        help_text += (
            "**‚ö° –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:**\n"
            "‚Ä¢ /start_rp - üé¨ –ù–∞—á–∞—Ç—å —Ä–æ–ª–µ–≤—É—é\n"
            "‚Ä¢ /force_start - ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–æ–ª–µ–≤—É—é\n"
            "‚Ä¢ /stop_rp - üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–ª–µ–≤—É—é\n\n"
        )
    
    help_text += (
        "**üéÆ –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ /role - üé≠ –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å\n"
        "‚Ä¢ /stats - üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /achievements - üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ /top - üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ /roles - üë• –í—Å–µ —Ä–æ–ª–∏\n\n"
        "üí° **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n"
        "1. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç /start_rp\n"
        "2. –ò–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫ —Å–≤–æ–∏–º —Ä–æ–ª—è–º\n"
        "3. –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é\n"
        "4. –ò–≥—Ä–æ–∫–∏ –ø–∏—à—É—Ç –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "5. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç /stop_rp\n\n"
        "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @PicoFromTheVoid"
    )
    
    await message.answer(help_text)

# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´
@dp.message(Command("moderators"))
async def moderators_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    moderators = db_manager.get_moderators()
    
    if not moderators:
        moderators_text = "üìã **–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:**\n\n‚Ä¢ –í—ã (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    else:
        moderators_list = ["‚Ä¢ –í—ã (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"]
        for mod in moderators:
            added_by = f" (–¥–æ–±–∞–≤–∏–ª @{mod['added_by_username']})" if mod['added_by_username'] else ""
            mod_info = f"‚Ä¢ {mod['first_name']}"
            if mod['username']:
                mod_info += f" (@{mod['username']})"
            mod_info += f" - ID: {mod['user_id']}{added_by}"
            moderators_list.append(mod_info)
        
        moderators_text = "üìã **–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:**\n\n" + "\n".join(moderators_list)
    
    await message.answer(moderators_text)

@dp.message(Command("add_moderator"))
async def add_moderator_cmd(message: types.Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º: `/add_moderator @username`")
        return
    
    username = command.args.strip()
    if not username.startswith('@'):
        username = f"@{username}"
    
    try:
        user = await bot.get_chat(username)
        
        if user.id == ADMIN_ID:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return
        
        success = db_manager.add_moderator(
            user.id, 
            user.username or "", 
            user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
            message.from_user.id
        )
        
        if success:
            await message.answer(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã!**\n\n"
                f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìß –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
                f"üÜî ID: `{user.id}`"
            )
            
            try:
                await bot.send_message(
                    user.id,
                    "üéâ **–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Ä–æ–ª–µ–≤–æ–≥–æ –±–æ—Ç–∞!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ (/start_rp)\n"
                    "‚Ä¢ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ (/stop_rp)\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /force_start\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏! üëë"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            
    except Exception as e:
        logger.error(f"Error adding moderator {username}: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}.\n\n"
            "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" 
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É\n"
            "‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n"
            "üí° **–†–µ—à–µ–Ω–∏–µ:** –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –õ–° –∫–æ–º–∞–Ω–¥—É /start"
        )

@dp.message(Command("add_moderator_id"))
async def add_moderator_id_cmd(message: types.Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/add_moderator_id 123456789`")
        return
    
    try:
        user_id = int(command.args)
        
        if user_id == ADMIN_ID:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return
        
        try:
            user = await bot.get_chat(user_id)
            
            success = db_manager.add_moderator(
                user.id, 
                user.username or "", 
                user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                message.from_user.id
            )
            
            if success:
                await message.answer(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã!**\n\n"
                    f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üìß –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                    f"üÜî ID: `{user.id}`"
                )
                
                try:
                    await bot.send_message(
                        user.id,
                        "üéâ **–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Ä–æ–ª–µ–≤–æ–≥–æ –±–æ—Ç–∞!**\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ (/start_rp)\n"
                        "‚Ä¢ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ (/stop_rp)\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /force_start\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏! üëë"
                    )
                except:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
                
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞–ª –±–æ—Ç—É.")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID! ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@dp.message(Command("remove_moderator"))
async def remove_moderator_cmd(message: types.Message, command: CommandObject):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º: `/remove_moderator @username`")
        return
    
    username = command.args.strip()
    if not username.startswith('@'):
        username = f"@{username}"
    
    try:
        moderators = db_manager.get_moderators()
        moderator_to_remove = None
        
        for mod in moderators:
            if mod['username'] and mod['username'].lower() == username[1:].lower():
                moderator_to_remove = mod
                break
        
        if not moderator_to_remove:
            await message.answer(f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        success = db_manager.remove_moderator(moderator_to_remove['user_id'])
        
        if success:
            await message.answer(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {username} —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("chats"))
async def my_chats_cmd(message: types.Message):
    """–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    logger.info(f"üí¨ –ö–æ–º–∞–Ω–¥–∞ /chats –æ—Ç {message.from_user.id}")
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á–∞—Ç—ã!")
        return
    
    chats = db_manager.get_all_chats()
    
    if not chats:
        await message.answer("üìã –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
        return
    
    chats_list = []
    for i, chat in enumerate(chats, 1):
        chat_info = f"{i}. {chat['chat_title']} ({chat['chat_type']})"
        chat_info += f"\n   ID: `{chat['chat_id']}`"
        chats_list.append(chat_info)
    
    chats_text = "üìã **–ß–ê–¢–´ –° –ë–û–¢–û–ú:**\n\n" + "\n\n".join(chats_list)
    chats_text += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–≤—ã–π—Ç–∏ ID –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    await message.answer(chats_text)

@dp.message(Command("–≤—ã–π—Ç–∏"))
async def leave_chat_cmd(message: types.Message, command: CommandObject):
    """–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    logger.info(f"üö™ –ö–æ–º–∞–Ω–¥–∞ /–≤—ã–π—Ç–∏ –æ—Ç {message.from_user.id}")
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —á–∞—Ç–æ–≤!")
        return
    
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: `/–≤—ã–π—Ç–∏ 123456789`")
        return
    
    try:
        chat_id = int(command.args)
        
        try:
            await bot.leave_chat(chat_id)
            db_manager.remove_chat(chat_id)
            await message.answer(f"‚úÖ –ë–æ—Ç –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞! ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message(Command("role"))
async def my_role_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üé≠ –ö–æ–º–∞–Ω–¥–∞ /role –æ—Ç {message.from_user.id}")
    
    user_role = get_character_for_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name
    )
    
    if user_role:
        role_data = CHARACTERS[user_role]
        await message.answer(
            f"üé≠ **–í–ê–®–ê –†–û–õ–¨:** {user_role}\n"
            f"üìù **–ê–º–ø–ª—É–∞:** {role_data['role']}\n"
            f"‚ÑπÔ∏è **–û–ø–∏—Å–∞–Ω–∏–µ:** {role_data['desc']}\n\n"
            f"üí° –≠—Ç–∞ —Ä–æ–ª—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞—à–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º/–∏–º–µ–Ω–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )
    else:
        await message.answer(
            "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª–∏!**\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π\n"
            "‚Ä¢ –í–∞—à–µ –∏–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏\n"
            "‚Ä¢ –†–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
            "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @PicoFromTheVoid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏"
        )

@dp.message(Command("stats"))
async def user_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üìä –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {message.from_user.id}")
    
    try:
        db_manager.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        user_id = message.from_user.id
        stats = db_manager.get_user_stats(user_id)
        
        user_role = get_character_for_user(
            user_id, 
            message.from_user.username,
            message.from_user.first_name
        )
        
        if stats:
            achievements = db_manager.get_user_achievements(user_id)
            achievements_count = db_manager.get_achievements_count(user_id)
            
            stats_text = (
                f"üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä\n\n"
                f"üë§ **–ò–º—è:** {stats['first_name'] or message.from_user.first_name}\n"
                f"üìß **–Æ–∑–µ—Ä–Ω–µ–π–º:** @{stats['username'] or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üé≠ **–í–∞—à–∞ —Ä–æ–ª—å:** {user_role or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n\n"
                f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
                f"üí≠ **–û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {stats['total_responses']}\n"
                f"üïπÔ∏è **–°–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ:** {stats['sessions_played']}\n"
                f"üì® **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {stats['total_messages']}\n"
                f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {achievements_count}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /achievements —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
            )
        else:
            stats_text = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                "üéÆ **–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ä–æ–ª–µ–≤—ã—Ö.**\n"
                "üí´ **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–æ–ª–µ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!**"
            )
        
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"Error in user_stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("achievements"))
async def achievements_cmd(message: types.Message):
    """–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    logger.info(f"üèÜ –ö–æ–º–∞–Ω–¥–∞ /achievements –æ—Ç {message.from_user.id}")
    
    try:
        user_id = message.from_user.id
        achievements = db_manager.get_user_achievements(user_id)
        
        if achievements:
            achievements_list = []
            for ach in achievements:
                achievement_data = ACHIEVEMENTS.get(ach['achievement_id'])
                if achievement_data:
                    date = datetime.fromisoformat(ach['unlocked_at']).strftime("%d.%m.%Y")
                    achievements_list.append(f"‚Ä¢ **{achievement_data['name']}**\n  üìÖ {date} - {achievement_data['desc']}")
            
            achievements_text = f"üèÜ **–í–ê–®–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ({len(achievements_list)}):** üèÜ\n\n" + "\n\n".join(achievements_list)
        else:
            achievements_text = (
                "üèÜ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.**\n\n"
                "üéÆ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
                "‚Ä¢ üé≠ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–ª–µ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö\n"
                "‚Ä¢ üí¨ –ê–∫—Ç–∏–≤–Ω–æ –ø–∏—à–∏—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
                "‚Ä¢ ‚≠ê –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–≤—ã—Ö\n\n"
                "üí´ **–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∂–¥–µ—Ç –≤–∞—Å —É–∂–µ –≤ –ø–µ—Ä–≤–æ–π —Ä–æ–ª–µ–≤–æ–π!**"
            )
        
        await message.answer(achievements_text)
    except Exception as e:
        logger.error(f"Error in achievements: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

@dp.message(Command("top"))
async def top_cmd(message: types.Message):
    """–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    logger.info(f"üèÖ –ö–æ–º–∞–Ω–¥–∞ /top –æ—Ç {message.from_user.id}")
    
    try:
        top_players = db_manager.get_top_players(10)
        
        if top_players:
            top_list = []
            for i, player in enumerate(top_players, 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                name = player['first_name'] or player['username'] or f"–ò–≥—Ä–æ–∫ {player['user_id']}"
                top_list.append(f"{medal} **{name}** - {player['total_responses']} –æ—Ç–≤–µ—Ç–æ–≤, {player['sessions_played']} —Å–µ—Å—Å–∏–π")
            
            top_text = "üèÜ **–¢–û–ü –ò–ì–†–û–ö–û–í** üèÜ\n\n" + "\n".join(top_list)
        else:
            top_text = (
                "üèÜ **–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤.**\n\n"
                "üéÆ **–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —Ç–æ–ø–µ!**\n"
                "üí´ **–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–ª–µ–≤—ã—Ö –∏ –Ω–∞–±–∏—Ä–∞–π—Ç–µ –æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!**"
            )
        
        await message.answer(top_text)
    except Exception as e:
        logger.error(f"Error in top: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")

@dp.message(Command("roles"))
async def all_roles_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤"""
    logger.info(f"üë• –ö–æ–º–∞–Ω–¥–∞ /roles –æ—Ç {message.from_user.id}")
    
    try:
        roles_text = "üé≠ **–í–°–ï –†–û–õ–ò –ò –ò–• –í–õ–ê–î–ï–õ–¨–¶–´** üé≠\n\n"
        
        for character, data in CHARACTERS.items():
            owner = None
            for username, char in USER_CHARACTER_MAPPING.items():
                if char == character:
                    owner = username
                    break
            
            if owner:
                roles_text += f"‚Ä¢ **{character}** - {data['role']}\n  üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** {owner}\n\n"
            else:
                roles_text += f"‚Ä¢ **{character}** - {data['role']}\n  ü§ñ **–°–≤–æ–±–æ–¥–Ω–∞—è —Ä–æ–ª—å**\n\n"
        
        await message.answer(roles_text)
    except Exception as e:
        logger.error(f"Error in all_roles: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π")

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    
    if message.chat.type == "private":
        await message.answer(
            "üé≠ **–†–æ–ª–µ–≤–æ–π –±–æ—Ç –ü–∏–∫–æ –ü–∏–∫–æ–≤–∏—á–∞**\n\n"
            "‚ùå **–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —á–∞—Ç–∞—Ö!**\n\n"
            "üí° **–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:**\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ç—É–¥–∞\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–ª–µ–≤—ã—Ö!\n\n"
            "üéÆ **–ù–∞—á–Ω–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!**"
        )
        return
    
    db_manager.add_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    if message.chat.type != "private":
        db_manager.add_chat(
            message.chat.id,
            message.chat.title,
            message.chat.type,
            message.from_user.id
        )
    
    user_role = get_character_for_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name
    )
    
    user_status = ""
    if message.from_user.id == ADMIN_ID:
        user_status = "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif is_moderator(message.from_user.id):
        user_status = "üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        user_status = "üë§ –ò–≥—Ä–æ–∫"
    
    chat_type = "–≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"
    role_info = f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {user_role}" if user_role else "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª–∏"
    
    start_text = (
        f"üé≠ **–†–æ–ª–µ–≤–æ–π –±–æ—Ç –ü–∏–∫–æ –ü–∏–∫–æ–≤–∏—á–∞**\n\n"
        f"‚úÖ **–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ {chat_type}!**\n"
        f"üîë **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {user_status}\n"
        f"{role_info}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
        f"üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /role —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    )
    
    await message.answer(start_text)

# –†–û–õ–ï–í–´–ï –ö–û–ú–ê–ù–î–´
@dp.message(Command("start_rp"))
async def start_roleplay_with_mode(message: types.Message, command: CommandObject):
    logger.info(f"üé≠ –ö–æ–º–∞–Ω–¥–∞ /start_rp –æ—Ç {message.from_user.id}")
    
    if message.chat.type == "private":
        await message.answer("‚ùå –†–æ–ª–µ–≤—ã–µ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –õ–°! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.")
        return
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ!")
        return
    
    chat_id = message.chat.id
    
    existing_session_id, existing_session = roleplay_manager.get_session_by_chat(chat_id)
    if existing_session:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª–µ–≤–∞—è! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é /stop_rp")
        return
    
    mode = command.args or "free"
    
    if mode not in ROLEPLAY_MODES:
        modes_list = "\n".join([f"`{mode_id}` - {data['name']}" for mode_id, data in ROLEPLAY_MODES.items()])
        await message.answer(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n{modes_list}\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `/start_rp battle`"
        )
        return
    
    theme = ROLEPLAY_MODES[mode]["name"]
    session_id = roleplay_manager.create_session(message.from_user.id, chat_id, theme, mode)
    
    if not session_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏!")
        return
    
    creator_character = get_character_for_user(
        message.from_user.id,
        message.from_user.username, 
        message.from_user.first_name
    ) or "–ü–∏–∫–æ –ü–∏–∫–æ–≤–∏—á"
    
    success, message_text = roleplay_manager.add_player(
        session_id,
        message.from_user.id,
        creator_character,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    if not success:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {message_text}")
        return
    
    session = roleplay_manager.get_session(session_id)
    
    start_message = await message.answer(
        f"üé≠ **–†–û–õ–ï–í–ê–Ø –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!**\n\n"
        f"üìù **–†–µ–∂–∏–º:** {theme}\n"
        f"‚è∞ **–ù–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:** 1 –º–∏–Ω—É—Ç–∞\n"
        f"üë• **–°–∏—Å—Ç–µ–º–∞:** –°–í–û–ë–û–î–ù–´–ô –í–´–ë–û–† –†–û–õ–ï–ô\n\n"
        f"**üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:**",
        reply_markup=create_join_keyboard(session)
    )
    
    session["pinned_message_id"] = start_message.message_id
    
    try:
        if message.chat.type != "private":
            await bot.pin_chat_message(chat_id, start_message.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    asyncio.create_task(wait_for_players(session_id, chat_id))
    await message.answer(f"‚úÖ **–†–æ–ª–µ–≤–∞—è —Å–æ–∑–¥–∞–Ω–∞!** –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ **{creator_character}**")

@dp.message(Command("force_start"))
async def force_start_cmd(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–æ–ª–µ–≤—É—é –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –º–∏–Ω—É—Ç—ã"""
    logger.info(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ /force_start –æ—Ç {message.from_user.id}")
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç!")
        return
    
    chat_id = message.chat.id
    
    session_id, session = roleplay_manager.get_session_by_chat(chat_id)
    
    if not session or session["status"] != "waiting":
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–≤—ã—Ö –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è!")
        return
    
    success, initial_scene = roleplay_manager.force_start_session(session_id)
    
    if success:
        players_list = "\n".join([f"‚Ä¢ {data['character']} üë§" for data in session["players"].values()])
        
        await message.answer(
            f"‚ö° **–†–û–õ–ï–í–ê–Ø –ó–ê–ü–£–©–ï–ù–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û!**\n\n"
            f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{players_list}\n\n"
            f"üé≠ **–ù–ê–ß–ê–õ–û –ò–°–¢–û–†–ò–ò:**\n{initial_scene}\n\n"
            f"üí¨ **–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!**\n"
            f"üé¨ **–ö–æ–≥–¥–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_rp**"
        )
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–µ–π
        try:
            if session.get("pinned_message_id"):
                await bot.unpin_chat_message(chat_id, session["pinned_message_id"])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {initial_scene}")

@dp.message(Command("stop_rp"))
async def stop_roleplay(message: types.Message):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–ª–µ–≤—É—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info(f"üõë –ö–æ–º–∞–Ω–¥–∞ /stop_rp –æ—Ç {message.from_user.id}")
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–æ–ª–µ–≤—ã–µ!")
        return
    
    chat_id = message.chat.id
    
    session_id, session = roleplay_manager.get_session_by_chat(chat_id)
    
    if session:
        success, stats = roleplay_manager.end_session(session_id)
        
        if success:
            players_list = "\n".join([f"‚Ä¢ {data['character']}" for data in session["players"].values()])
            
            top_players_text = ""
            if stats["top_players"]:
                top_players_text = "\nüèÜ **–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:**\n"
                for i, player in enumerate(stats["top_players"], 1):
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                    top_players_text += f"{medal} {player['character']} ({player['first_name']}) - {player['messages_count']} —Å–æ–æ–±—â.\n"
            
            await message.answer(
                f"üé¨ **–†–û–õ–ï–í–ê–Ø –ó–ê–í–ï–†–®–ï–ù–ê!** üé¨\n\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{players_list}\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:**\n"
                f"‚Ä¢ üë§ –ò–≥—Ä–æ–∫–æ–≤: {stats['total_players']}\n"
                f"‚Ä¢ üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
                f"‚Ä¢ ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['session_duration'].seconds // 60} –º–∏–Ω.\n"
                f"{top_players_text}\n"
                f"üôè **–û–ì–†–û–ú–ù–û–ï –°–ü–ê–°–ò–ë–û –í–°–ï–ú –ó–ê –£–ß–ê–°–¢–ò–ï!**\n"
                f"üí´ **–í—ã –±—ã–ª–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã –≤ —Å–≤–æ–∏—Ö —Ä–æ–ª—è—Ö!**\n\n"
                f"–î–æ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! üëã"
            )
            
            try:
                if message.chat.type != "private" and session.get("pinned_message_id"):
                    await bot.unpin_chat_message(chat_id, session["pinned_message_id"])
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–ª–µ–≤–æ–π!")
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–≤—ã—Ö –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!")

# CALLBACK HANDLERS
@dp.callback_query(F.data.startswith("join_"))
async def join_roleplay(callback: types.CallbackQuery):
    character = callback.data.replace("join_", "")
    
    active_session_id, active_session = roleplay_manager.get_session_by_chat(callback.message.chat.id)
    
    if not active_session:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–≤—ã—Ö –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")
        return
    
    session_id, session = active_session_id, active_session
    
    can_join, reason = can_user_join_with_character(session, callback.from_user.id, character)
    if not can_join:
        await callback.answer(f"‚ùå {reason}")
        return
    
    success, message_text = roleplay_manager.add_player(
        session_id, 
        callback.from_user.id,
        character,
        callback.from_user.username,
        callback.from_user.first_name,
        callback.from_user.last_name
    )
    
    if success:
        await callback.answer(f"‚úÖ {message_text}")
        
        players_list = "\n".join([
            f"‚Ä¢ {data['character']} üë§" 
            for data in session["players"].values()
        ]) or "‚Ä¢ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è"
        
        time_left = ROLEPLAY_SETTINGS["max_wait_time"] - (datetime.now() - datetime.fromisoformat(session["created_at"])).seconds
        time_left = max(0, time_left)
        
        await callback.message.edit_text(
            f"üé≠ **–†–û–õ–ï–í–ê–Ø –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!**\n\n"
            f"üìù **–†–µ–∂–∏–º:** {session['theme']}\n"
            f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:** {time_left} —Å–µ–∫\n"
            f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{players_list}\n\n"
            f"**üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:**",
            reply_markup=create_join_keyboard(session)
        )
    else:
        await callback.answer(f"‚ùå {message_text}")

@dp.callback_query(F.data == "role_taken")
async def handle_role_taken(callback: types.CallbackQuery):
    await callback.answer("‚ùå –≠—Ç–∞ —Ä–æ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞!")

@dp.callback_query(F.data == "all_roles_taken")
async def handle_all_roles_taken(callback: types.CallbackQuery):
    await callback.answer("‚ùå –í—Å–µ —Ä–æ–ª–∏ –∑–∞–Ω—è—Ç—ã!")

@dp.message()
async def handle_all_messages(message: types.Message):
    if message.text and message.text.startswith('/'):
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    active_session_id, active_session = roleplay_manager.get_session_by_chat(chat_id)
    
    if not active_session or active_session["status"] != "active":
        return
    
    session_id, session = active_session_id, active_session
    
    if user_id in session["players"]:
        character = session["players"][user_id]["character"]
        response_text = message.text or (message.caption if message.caption else "")
        
        if response_text:
            logger.info(f"üí¨ {character}: {response_text}")
            
            session["players"][user_id]["messages_count"] = session["players"][user_id].get("messages_count", 0) + 1
            
            db_manager.update_user_stats(user_id, responses_delta=1, messages_delta=1)
            
            new_achievements = db_manager.check_achievements(user_id)
            if new_achievements:
                for achievement_id in new_achievements:
                    achievement = ACHIEVEMENTS[achievement_id]
                    await message.answer(
                        f"üéâ **–ù–û–í–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!** üéâ\n\n"
                        f"üèÜ **{achievement['name']}**\n"
                        f"üìñ {achievement['desc']}\n\n"
                        f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {message.from_user.first_name}!"
                    )

async def wait_for_players(session_id, chat_id):
    await asyncio.sleep(ROLEPLAY_SETTINGS["max_wait_time"])
    
    session = roleplay_manager.get_session(session_id)
    if session and session["status"] == "waiting":
        success, initial_scene = await roleplay_manager.start_session(session_id)
        
        if success:
            players_list = "\n".join([f"‚Ä¢ {data['character']} üë§" for data in session["players"].values()])
            
            await bot.send_message(
                chat_id,
                f"üé¨ **–†–û–õ–ï–í–ê–Ø –ù–ê–ß–ê–õ–ê–°–¨!** üé¨\n\n"
                f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n{players_list}\n\n"
                f"üé≠ **–ù–ê–ß–ê–õ–û –ò–°–¢–û–†–ò–ò:**\n{initial_scene}\n\n"
                f"üí¨ **–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!**\n"
                f"üé¨ **–ö–æ–≥–¥–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /stop_rp**"
            )
            
            # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–µ–π
            try:
                if session.get("pinned_message_id"):
                    await bot.unpin_chat_message(chat_id, session["pinned_message_id"])
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
        else:
            await bot.send_message(chat_id, f"‚ùå {initial_scene}")
            roleplay_manager.end_session(session_id)

def check_database():
    import os
    if os.path.exists('roleplay_bot.db'):
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö roleplay_bot.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        conn = sqlite3.connect('roleplay_bot.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"   - {table[0]}")
        conn.close()
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑!")

check_database()

async def main():
    logger.info("üé≠ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await set_bot_commands()
    
    db_manager.add_user(ADMIN_ID, "PicoFromTheVoid", "–ì–ª–∞–≤–Ω—ã–π", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    db_moderators = db_manager.get_moderators()
    for mod in db_moderators:
        MODERATORS[mod['user_id']] = f"{mod['first_name']} (@{mod['username']})"
    
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")
    logger.info(f"üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(MODERATORS)}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())