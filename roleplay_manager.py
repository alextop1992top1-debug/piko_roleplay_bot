import random
import logging
import asyncio
from datetime import datetime
from config import CHARACTERS, ROLEPLAY_SETTINGS, ROLEPLAY_MODES
from database_manager import db_manager

logger = logging.getLogger(__name__)

class StoryGenerator:
    def __init__(self):
        self.scene_templates = [
            "üé∏ **FNF –ë–ê–ù–î–ê –í –°–ë–û–†–ï**\n{characters} —Å–æ–±—Ä–∞–ª–∏—Å—å –Ω–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ü–µ–Ω–µ. –í –≤–æ–∑–¥—É—Ö–µ –≤–∏—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ - —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤–∞–∂–Ω–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ!",
            "üçï **–ù–û–ß–ù–û–ô –ü–†–ò–ö–õ–Æ–ß–ï–ù–ò–Ø**\n{characters} –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ –Ω–æ—á–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –§–æ–Ω–∞—Ä–∏ –º–∏–≥–∞—é—Ç, –≥–¥–µ-—Ç–æ –∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞... –ß—Ç–æ –∏—Ö –∂–¥–µ—Ç —ç—Ç–æ–π –Ω–æ—á—å—é?", 
            "üé§ **–†–ï–ü–ï–¢–ò–¶–ò–Ø –° –°–Æ–†–ü–†–ò–ó–û–ú**\n–ù–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ {characters} —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ó–≤—É–∫ –ø—Ä–æ–ø–∞–ª, —Å–≤–µ—Ç –ø–æ–≥–∞—Å... –ù–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!",
            "üèÜ **–ì–†–ê–ù–î-–§–ò–ù–ê–õ**\n{characters} –≤—ã—à–ª–∏ –≤ —Ñ–∏–Ω–∞–ª —Å–∞–º–æ–≥–æ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞. –ü—É–±–ª–∏–∫–∞ –∑–∞–º–µ—Ä–ª–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏...",
            "üö® **–ß–†–ï–ó–í–´–ß–ê–ô–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø**\n–í–æ –≤—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è {characters} –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ—á—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ. –ü—Ä–∏–¥–µ—Ç—Å—è –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å!",
            "üé≠ **–ö–û–°–¢–Æ–ú–ò–†–û–í–ê–ù–ù–´–ô –ë–ê–õ**\n{characters} –ø–æ–ø–∞–ª–∏ –Ω–∞ —Ä–æ—Å–∫–æ—à–Ω—ã–π –±–∞–ª –≤ –º–∞—Å–∫–∞—Ö. –ù–æ –ø–æ–¥ –º–∞—Å–∫–∞–º–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–∞–π–Ω—ã...",
            "üîÆ **–ü–†–û–†–û–ß–ï–°–¢–í–û**\n–°—Ç–∞—Ä–∞—è —Ü—ã–≥–∞–Ω–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞ {characters} –Ω–µ–æ–±—ã—á–Ω–æ–µ –±—É–¥—É—â–µ–µ. –°–±—É–¥–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ?",
            "üèùÔ∏è **–ó–ê–¢–ï–†–Ø–ù–ù–´–ï –ù–ê –û–°–¢–†–û–í–ï**\n{characters} –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ –Ω–µ–æ–±–∏—Ç–∞–µ–º–æ–º –æ—Å—Ç—Ä–æ–≤–µ –ø–æ—Å–ª–µ –∫–æ—Ä–∞–±–ª–µ–∫—Ä—É—à–µ–Ω–∏—è. –ö–∞–∫ –æ–Ω–∏ –≤—ã–∂–∏–≤—É—Ç?",
            "üëª **–ü–†–ò–ó–†–ê–ö–ò –ü–†–û–®–õ–û–ì–û**\n–í —Å—Ç–∞—Ä–æ–º —Ç–µ–∞—Ç—Ä–µ, –≥–¥–µ —Ä–µ–ø–µ—Ç–∏—Ä—É—é—Ç {characters}, –æ–±–∏—Ç–∞—é—Ç –ø—Ä–∏–∑—Ä–∞–∫–∏ –ø—Ä–æ—à–ª—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...",
            "ü§ñ **–¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–ë–û–ô**\n–í–æ –≤—Ä–µ–º—è –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ–≥–æ —à–æ—É {characters} —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤—ã—à–ª–∞ –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è!",
            "üé™ **–ü–£–¢–ï–®–ï–°–¢–í–£–Æ–©–ò–ô –¶–ò–†–ö**\n{characters} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–∞–≥–∞–¥–æ—á–Ω–æ–º—É —Ü–∏—Ä–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–º–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã...",
            "üï∞Ô∏è **–ü–û–ü–ê–î–ê–ù–ò–ï –í –ü–†–û–®–õ–û–ï**\n{characters} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏—Å—å –≤ 80-–µ –≥–æ–¥—ã! –°–º–æ–≥—É—Ç –ª–∏ –æ–Ω–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?",
            "üéÆ **–í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–¨–ù–û–°–¢–¨**\n{characters} –æ–∫–∞–∑–∞–ª–∏—Å—å –∑–∞–ø–µ—Ä—Ç—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ. –ß—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!",
            "üëë **–ö–û–†–û–õ–ï–í–°–ö–ò–ô –ü–†–ò–ï–ú**\n{characters} –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –±–∞–ª, –Ω–æ —Å—Ä–µ–¥–∏ –≥–æ—Å—Ç–µ–π –∑–∞—Ç–µ—Ä—è–ª—Å—è —É–±–∏–π—Ü–∞...",
            "üöÄ **–ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –û–î–ò–°–°–ï–Ø**\n{characters} –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ç—É—Ä–Ω–µ, –Ω–æ –∏—Ö –∫–æ—Ä–∞–±–ª—å –≤—ã—à–µ–ª –Ω–∞ –æ—Ä–±–∏—Ç—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã..."
        ]

    def generate_scene(self, characters=None, mode="free"):
        template = random.choice(self.scene_templates)
        
        if characters and len(characters) > 0:
            char_names = [char["character"] for char in characters]
            if len(char_names) > 3:
                char_text = f"{', '.join(char_names[:2])} –∏ –¥—Ä—É–≥–∏–µ"
            else:
                char_text = " –∏ ".join(char_names)
        else:
            char_text = "–≤—Å—è –±–∞–Ω–¥–∞"
        
        scene = template.format(characters=char_text)
        return scene

class RoleplayManager:
    def __init__(self):
        self.active_sessions = {}
        self.story_gen = StoryGenerator()
    
    def create_session(self, creator_id, chat_id, theme="", mode="free"):
        session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        self.active_sessions[session_id] = {
            "id": session_id,
            "chat_id": chat_id,
            "creator": creator_id,
            "theme": theme,
            "mode": mode,
            "players": {},
            "status": "waiting",
            "created_at": datetime.now().isoformat(),
            "current_scene": "",
            "story_arc": [],
            "current_scene_index": 0,
            "pinned_message_id": None
        }
        
        logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        return session_id
    
    def add_player(self, session_id, user_id, character_name, username="", first_name="", last_name=""):
        if session_id not in self.active_sessions:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        
        session = self.active_sessions[session_id]
        
        for player_id, player_data in session["players"].items():
            if player_data["character"] == character_name and player_id != user_id:
                return False, "–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –∑–∞–Ω—è—Ç!"
        
        db_manager.add_user(user_id, username, first_name, last_name)
        
        session["players"][user_id] = {
            "character": character_name,
            "username": username,
            "first_name": first_name,
            "joined_at": datetime.now().isoformat(),
            "messages_count": 0
        }
        
        logger.info(f"üë§ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {character_name} (ID: {user_id})")
        return True, f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫–∞–∫ {character_name}!"
    
    def get_session(self, session_id):
        return self.active_sessions.get(session_id)
    
    def get_session_by_chat(self, chat_id):
        for session_id, session in self.active_sessions.items():
            if session.get("chat_id") == chat_id and session["status"] in ["waiting", "active"]:
                return session_id, session
        return None, None
    
    async def start_session(self, session_id):
        if session_id not in self.active_sessions:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        
        session = self.active_sessions[session_id]
        
        total_players = len(session["players"])
        
        if total_players >= ROLEPLAY_SETTINGS["min_players"]:
            session["status"] = "active"
            
            initial_scene = self.story_gen.generate_scene(list(session["players"].values()), session["mode"])
            session["current_scene"] = initial_scene
            session["story_arc"] = [initial_scene]
            session["current_scene_index"] = 0
            
            for user_id in session["players"]:
                db_manager.update_user_stats(user_id, sessions_delta=1)
            
            logger.info(f"üé¨ –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {session_id} —Å {total_players} –∏–≥—Ä–æ–∫–∞–º–∏")
            return True, initial_scene
        else:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –í—Å–µ–≥–æ: {total_players}, –Ω—É–∂–Ω–æ: {ROLEPLAY_SETTINGS['min_players']}"

    def force_start_session(self, session_id):
        if session_id not in self.active_sessions:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        
        session = self.active_sessions[session_id]
        session["status"] = "active"
        
        initial_scene = self.story_gen.generate_scene(list(session["players"].values()), session["mode"])
        session["current_scene"] = initial_scene
        session["story_arc"] = [initial_scene]
        
        for user_id in session["players"]:
            db_manager.update_user_stats(user_id, sessions_delta=1)
        
        logger.info(f"üé¨ –°–µ—Å—Å–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞: {session_id}")
        return True, initial_scene

    def end_session(self, session_id):
        if session_id not in self.active_sessions:
            return False, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        
        session = self.active_sessions[session_id]
        
        players_stats = []
        total_messages = 0
        
        for user_id, player_data in session["players"].items():
            messages_count = player_data.get("messages_count", 0)
            players_stats.append({
                "user_id": user_id,
                "character": player_data["character"],
                "messages_count": messages_count,
                "username": player_data["username"],
                "first_name": player_data["first_name"]
            })
            total_messages += messages_count
            
            db_manager.update_user_stats(user_id, messages_delta=messages_count)
        
        players_stats.sort(key=lambda x: x["messages_count"], reverse=True)
        
        stats = {
            "total_players": len(players_stats),
            "total_messages": total_messages,
            "top_players": players_stats[:3],
            "session_duration": datetime.now() - datetime.fromisoformat(session["created_at"])
        }
        
        del self.active_sessions[session_id]
        
        logger.info(f"üé¨ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session_id}")
        return True, stats

roleplay_manager = RoleplayManager()